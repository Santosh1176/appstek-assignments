
name: Push to GHCR and Sign Container Image

on:
  push:
    branches:
      - '*'

jobs:
  build:
    env:
      IMAGE: ghcr.io/santosh1176/appstek-assignments
    permissions:
      contents: read
      packages: write
      # The below permission on our PAT would be used to create the OIDC token for signing the 
      # Container image after the build process is completed
      id-token: write

    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3
   
      - name: Install cosign
        uses: sigstore/cosign-installer@v3.1.1
        with:
          cosign-release: 'v2.1.1'

      - name: Setup Docker buildx
        uses: docker/setup-buildx-action@v2

# Login to my ghcr account using username and PAT
      - name: Log into ghcr.io
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build and push container image
        id: push-step
        uses: docker/build-push-action@v4
        with:
          push: true
          # TODO - Change the latest tag to github_sha::8
          tags: |
            ${{ env.IMAGE }}:latest

# The below command will sign the container image digest following best-practices. As we are
# pushing to a puclic GitHub Container Regiostry, the signing certificates would be automatically
# pushed to Rekor transperancy logs.

      - name: Sign the container image
        run: cosign sign --yes ${{ env.IMAGE }}@${{ steps.push-step.outputs.digest }} 

      - name: Write signing key to disk
        run: 'echo "$KEY" > cosign.pub'
        shell: bash
        env:
          KEY: ${{ secrets.COSIGN_PUBLIC_KEY }}
          COSIGN_PASSWORD: ${{secrets.COSIGN_PASSWORD}}

      - name: Verify container digest with cosign
        run: |
          cosign verify --key cosign.pub santosh1176/appstek-assignments@sha256:c6cea37e6b6b12940669bf6bd8fb1f88fae86e3724ece838b6fc8433b2b2f01c
